package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"math/rand"
	"net/http"
	"os"
	"strings"
	"time"
)

func main() {
	if len(os.Args) <= 1 {
		panic("yo you havent said which rim you want to job")
	}

	tok := os.Getenv("GITHUB_TOKEN")
	if tok == "" {
		panic("who should i rim")
	}

	pr := strings.Split(os.Args[1], "/")
	var candidates []string
	cans := os.Getenv("REVIEWER_POOL")
	if cans == "" {
		fmt.Println("you no tell me i assume everyone eligible can review")
		candidates = getCandidates(pr, tok)
	} else {
		candidates = strings.Split(cans, ":")
	}
	reviewer := getReviewer(candidates)
	body := bytes.NewReader(reviewer)

	// Generated by curl-to-Go: https://mholt.github.io/curl-to-go
	req, err := http.NewRequest("POST", fmt.Sprintf("https://api.github.com/repos/%s/%s/pulls/%s/requested_reviewers", pr[3], pr[4], pr[6]), body)
	if err != nil {
		fmt.Println(err)
	}
	req.Header.Set("Authorization", "token "+tok)
	req.Header.Set("Content-Type", "application-json")

	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		fmt.Println(err)
	}
	defer resp.Body.Close()
	fmt.Println(resp.Status)
}

// getCandidates gets login names of users who can review the specified pull request
func getCandidates(pr []string, tok string) (candidates []string) {
	req, err := http.NewRequest("GET", fmt.Sprintf("https://api.github.com/repos/%s/%s/collaborators", pr[3], pr[4]), nil)
	if err != nil {
		fmt.Println(err)
	}
	req.Header.Set("Authorization", "token "+tok)

	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		fmt.Println(err)
	}
	defer resp.Body.Close()
	b, _ := ioutil.ReadAll(resp.Body)

	type User struct {
		Login string `json:"login"`
	}
	var users []User
	err = json.Unmarshal(b, &users)
	if err != nil {
		fmt.Println(err)
	}
	for _, u := range users {
		candidates = append(candidates, u.Login)
	}

	return
}

// getReviewer simply fills up json body for github PR review request cos im lazy
func getReviewer(candidates []string) (reviewer []byte) {
	r := rand.New(rand.NewSource(time.Now().UnixNano()))
	type ReviewersRequest struct {
		Reviewers []string `json:"reviewers"`
	}
	var rr ReviewersRequest
	rr.Reviewers = []string{candidates[r.Intn(len(candidates))]}
	reviewer, _ = json.Marshal(rr)
	return
}
